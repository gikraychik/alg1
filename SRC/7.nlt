# обработка кнопок
# TMP25 передается в следующее состояние

INCLUDE(regs.inc)

MOVE(VIDEO_MODE, TMP0)					# TMP0 = VIDEO_MODE
MOVE(BTN_ENTR_STATUS, TMP1)				# TMP1 = BTN_ENTR_STATUS
MOVE(BTN_UP, TMP2)						# TMP2 = BTN_UP
MOVE(BTN_DOWN, TMP3)					# TMP3 = BTN_DOWN
NOT(TMP1, TMP9)							# TMP9 = !BTN_ENTR_STATUS
MOVE(TMP0, TMP6)						# TMP6 = VIDEO_MODE (доп. ячейка для VIDEO_MODE)
#MOVE(T3, TMP25)						# TMP25 = T3
IEQ(3, VIDEO_MODE, TMP4)				# TMP4 = (VIDEO_MODE == 3)
MUX2(TMP4, TMP25, T3, TMP25)			# if (VIDEO_MODE != 3) { tmp25 = t3; }

# проверка на административный режим
IEQ(0, VIDEO_MODE, TMP4)				# TMP4 = (VIDEO_MODE == 0)
AND(LONG_BTN_ENTER, TMP4, TMP4)			# TMP4 = (VIDEO_MODE == 0) && LONG_BTN_ENTER
IMUX2(TMP4, NETLIST_SELECT, 8, 9)		# if (tmp4) { NETLIST_SELECT = 9; } else { NETLIST_SELECT = 8; }		
IEQ(20, ADMIN_T1, TMP5)					# TMP5 = (ADMIN_T1 == 20)
IMOVE(10, TMP6)							# TMP6 = 10
AND(TMP4, TMP5, TMP7)					# TMP7 = (VIDEO_MODE == 0) && LONG_BTN_ENTER && (ADMIN_T1 == 20)
MUX2(TMP7, ADMIN_T1, ADMIN_T1, TMP6)	# if (tmp7) { ADMIN_T1 = 10; }
NOT(TMP5, TMP5)							# TMP5 = !(ADMIN_T1 == 20)
AND(TMP4, TMP5, TMP7)					# TMP7 = (VIDEO_MODE == 0) && LONG_BTN_ENTER && !(ADMIN_T1 == 20)
IMOVE(20, TMP6)							# TMP6 = 20
MUX2(TMP7, ADMIN_T1, ADMIN_T1, TMP6)	# if (tmp7) { ADMIN_T1 = 20; }
IEQ(28, ADMIN_T2, TMP5)					# TMP5 = (ADMIN_T2 == 28)
AND(TMP4, TMP5, TMP7)					# TMP7 = (VIDEO_MODE == 0) && LONG_BTN_ENTER && (ADMIN_T2 == 28)
IMOVE(30, TMP6)							# TMP6 = 30
MUX2(TMP7, ADMIN_T2, ADMIN_T2, TMP6)	# if (tmp7) { ADMIN_T2 = 30; }
NOT(TMP5, TMP5)							# TMP5 = (ADMIN_T2 != 28)
AND(TMP4, TMP5, TMP7)					# TMP7 = (VIDEO_MODE == 0) && LONG_BTN_ENTER && (ADMIN_T2 != 28)
IMOVE(28, TMP6)							# TMP6 = 28
MUX2(TMP7, ADMIN_T2, ADMIN_T2, TMP6)	# if (tmp7) { ADMIN_T2 = 28; }
# конец проверки на административный режим

MOVE(TMP0, TMP6)						# TMP6 = VIDEO_MODE

# если нажаты up and down одновременно, не регистрируем нажатие
AND(BTN_UP_STATUS, BTN_DOWN_STATUS, TMP8)
IMOVE(0, TMP4)							# TMP4 = 0
MUX2(TMP8, TMP2, TMP2, TMP4)			# if (tmp8) { tmp2 = 0; }
MUX2(TMP8, TMP3, TMP3, TMP4)			# if (tmp8) { tmp3 = 0; }

IEQ(0, TMP0, TMP4)						# TMP4 = (VIDEO_MODE == 0)
AND(TMP4, TMP9, TMP5)					# TMP5 = (VIDEO_MODE == 0) && 	!BTN_ENTR_STATUS
AND(TMP5, TMP3, TMP7)					# TMP7 = (VIDEO_MODE == 0) && 	!BTN_ENTR_STATUS && BTN_DOWN
IMOVE(2, TMP8)							# TMP8 = 2
MUX2(TMP7, TMP6, TMP6, TMP8)			# if (tmp7) { TMP6 = 2; }
AND(TMP5, TMP2, TMP7)					# TMP7 = (VIDEO_MODE == 0) && 	!BTN_ENTR_STATUS && BTN_UP
IMOVE(1, TMP8)							# TMP8 = 1
MUX2(TMP7, TMP6, TMP6, TMP8)			# if (TMP7) { TMP6 = 1; }
EQ(TMP0, TMP6, TMP7)					# TMP7 = (TMP0 == TMP6)
MOVE(TMP6, TMP0)						# VIDEO_MODE = TMP6
IMOVE(0, TMP8)							# TMP8 = 0
MUX2(TMP7, TMP2, TMP8, TMP2)			# if (TMP0 != TMP6) { tmp2 = 0; }
MUX2(TMP7, TMP3, TMP8, TMP3)			# if (TMP0 != TMP6) { tmp3 = 0; }

IEQ(1, TMP0, TMP4)						# TMP4 = (VIDEO_MODE == 1)
AND(TMP4, TMP9, TMP5)					# TMP5 = (VIDEO_MODE == 1) && 	!BTN_ENTR_STATUS
AND(TMP5, TMP3, TMP7)					# TMP7 = (VIDEO_MODE == 1) && 	!BTN_ENTR_STATUS && BTN_DOWN
IMOVE(0, TMP8)							# TMP8 = 0
MUX2(TMP7, TMP6, TMP6, TMP8)			# if (tmp7) { TMP6 = 0; }
AND(TMP5, TMP2, TMP7)					# TMP7 = (VIDEO_MODE == 1) && 	!BTN_ENTR_STATUS && BTN_UP
IMOVE(2, TMP8)							# TMP8 = 2
MUX2(TMP7, TMP6, TMP6, TMP8)			# if (TMP7) { TMP6 = 2; }
EQ(TMP0, TMP6, TMP7)					# TMP7 = (TMP0 == TMP6)
MOVE(TMP6, TMP0)						# VIDEO_MODE = TMP6
IMOVE(0, TMP8)							# TMP8 = 0
MUX2(TMP7, TMP2, TMP8, TMP2)			# if (TMP0 != TMP6) { tmp2 = 0; }
MUX2(TMP7, TMP3, TMP8, TMP3)			# if (TMP0 != TMP6) { tmp3 = 0; }

IEQ(2, TMP0, TMP4)						# TMP4 = (VIDEO_MODE == 2)
AND(TMP4, TMP1, TMP5)					# TMP5 = (VIDEO_MODE == 2) && BTN_ENTR_STATUS
IMOVE(3, TMP8)							# TMP8 = 3
MUX2(TMP5, TMP6, TMP6, TMP8)			# if (tmp10) { TMP6 = 3; }
AND(TMP4, TMP9, TMP5)					# TMP5 = (VIDEO_MODE == 2) && !BTN_ENTR_STATUS
AND(TMP5, TMP3, TMP7)					# TMP7 = (VIDEO_MODE == 2) && !BTN_ENTR_STATUS && BTN_DOWN
IMOVE(1, TMP8)							# TMP8 = 1
MUX2(TMP7, TMP6, TMP6, TMP8)			# if (tmp7) { TMP6 = 1; }
NOT(TMP3, TMP7)							# TMP7 = !BTN_DOWN
AND(TMP5, TMP7, TMP7)					# TMP7 = (VIDEO_MODE == 2) && !BTN_ENTR_STATUS && !BTN_DOWN
AND(TMP7, TMP2, TMP8)					# TMP8 = (VIDEO_MODE == 2) && !BTN_ENTR_STATUS && !BTN_DOWN && BTN_UP
IMOVE(0, TMP4)							# TMP4 = 0
MUX2(TMP8, TMP6, TMP6, TMP4)			# if (TMP8) { TMP6 = 0; }
EQ(TMP0, TMP6, TMP8)					# TMP8 = (TMP0 == TMP6)
MOVE(TMP6, TMP0)						# VIDEO_MODE = TMP6
IMOVE(0, TMP4)							# TMP4 = 0
MUX2(TMP8, TMP2, TMP4, TMP2)			# if (TMP0 != TMP6) { tmp2 = 0; }
MUX2(TMP8, TMP3, TMP4, TMP3)			# if (TMP0 != TMP6) { tmp3 = 0; }

IEQ(3, TMP0, TMP4)						# TMP4 = (VIDEO_MODE == 3)
AND(TMP4, TMP9, TMP5)					# TMP5 = (VIDEO_MODE == 3) && !BTN_ENTR_STATUS
IMOVE(2, TMP8)							# TMP8 = 2
MUX2(TMP5, TMP6, TMP6, TMP8)			# if (tmp5) { TMP6 = 2; }
AND(TMP4, TMP1, TMP5)					# TMP5 = (VIDEO_MODE == 3) && BTN_ENTR_STATUS
NOT(TMP2, TMP7)							# TMP7 = !BTN_UP
AND(TMP5, TMP7, TMP10)					# TMP10 = (VIDEO_MODE == 3) && BTN_ENTR_STATUS && !BTN_UP
AND(TMP10, TMP3, TMP11)					# TMP11 = (VIDEO_MODE == 3) && BTN_ENTR_STATUS && !BTN_UP && BTN_DOWN
IMOVE(1, TMP8)							# TMP8 = 1
SUB(TMP25, TMP8, TMP12)					# TMP12 = TMP25 - 1
MOVE(ADMIN_T1, TMP8)					# TMP8 = 20
GE(TMP12, TMP8, TMP13)					# TMP13 = (TMP25 - 1 >= 20)
AND(TMP11, TMP13, TMP14)				# TMP14 = (VIDEO_MODE == 3) && BTN_ENTR_STATUS && !BTN_UP && BTN_DOWN && (TMP25 - 1 >= 20)
MUX2(TMP14, TMP25, TMP25, TMP12)		# if (tmp14) { TMP25 = TMP25 - 1; }
NOT(TMP13, TMP13)						# TMP13 = !(TMP25 - 1 >= 20)
AND(TMP11, TMP13, TMP14)				# TMP14 = (VIDEO_MODE == 3) && BTN_ENTR_STATUS && !BTN_UP && BTN_DOWN && !(TMP25 - 1 >= 20)
MUX2(TMP14, TMP25, TMP25, TMP8)			# if (tmp14) { tmp25 = 20; }
AND(TMP5, TMP2, TMP7)					# TMP7 = (VIDEO_MODE == 3) && BTN_ENTR_STATUS && BTN_UP
IMOVE(1, TMP8)							# TMP8 = 1
ADD(TMP25, TMP8, TMP10)					# TMP10 = TMP25 + 1
MOVE(ADMIN_T2, TMP8)					# TMP8 = 28
GE(TMP10, TMP8, TMP12)					# TMP12 = (TMP25 + 1 >= 28)
AND(TMP7, TMP12, TMP13)					# TMP13 = (VIDEO_MODE == 3) && BTN_ENTR_STATUS && BTN_UP && (TMP25 + 1 >= 28)
MUX2(TMP13, TMP25, TMP25, TMP8)			# if (tmp13) { tmp25 = 28; }
NOT(TMP12, TMP12)						# TMP12 = !(TMP25 + 1 >= 28)
AND(TMP7, TMP12, TMP13)					# TMP13 = (VIDEO_MODE == 3) && BTN_ENTR_STATUS && BTN_UP && !(TMP25 + 1 >= 28)
MUX2(TMP13, TMP25, TMP25, TMP10)		# if (tmp13) { tmp25 = tmp25 + 1; }
EQ(TMP0, TMP6, TMP10)					# TMP10 = (TMP0 == TMP6)
MOVE(TMP6, TMP0)						# VIDEO_MODE = TMP6
IMOVE(0, TMP8)							# TMP8 = 0
MUX2(TMP10, TMP2, TMP8, TMP2)			# if (tmp10) { tmp2 = 0; }
MUX2(TMP10, TMP3, TMP8, TMP3)			# if (tmp13) { tmp3 = 0; }

MOVE(TMP0, VIDEO_MODE)

IEQ(9, NETLIST_SELECT, TMP1)			# TMP1 = (NETLIST_SELECT == 9)
IMUX2(TMP1, TIMER_SEC, 0, 2)			# запуск таймера, если переходим в состояние 9
IMOVE(8, TMP0)							# TMP0 = 8 (если не переходим в 9 состояние, значение TMP0 не имеет значения)
#IMOVE(8, NETLIST_SELECT)

